import math

# the terms in the tuple are: a, b, c, xp, d, e, yp
waveform_params = {
    'saw':           (1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
    'square':        (1.0, 1.0, 0.0, 0.5, 0.0, 0.0, 0.0),
    'triangle':      (2.0, 1.0, 0.0, 0.5, 0.0, 0.0, 0.0),
    'pulse20':       (1.0, 1.0, 0.0, 0.2, 0.0, 0.0, 0.0),
    'brassy':        (2.0, 2.0, 0.0, 0.1, 0.0, 0.0, 0.0),  # 10% triangular pulse
    'pluckedString': (2.0, 1.0, 0.0, 0.2, 0.0, 0.0, 0.0),  # 20% uneven triangle
    'oboe':          (0.4, 1.0, 0.0, 0.12, 0.0, 1.0, 0.47),
    'trombone':      (2.0, 1.0, 0.0, 0.045, 1.0, 1.0, 0.0625),
    'frenchHorn':    (2.0, 1.0, 0.0, 0.09, 1.0, 0.0, 0.13)
}

ams_template = """Autogenerated
AMS 1
Generate MultiCycleFM
BaseNote {0}
RootKey {0}
SampleRate 44100
Channels 1
BitsPerSample 32
Volume Auto"""

def compute_harmonic(number, params):
    n = float(number)
    (a, b, c, xp, d, e, yp) = params
    x = n * math.pi * xp
    y = n * math.pi * yp
    module1 = 1.0 / math.pow(n, a)
    module2 = math.pow(math.sin(x), b) * math.pow(math.cos(x), c)
    module3 = math.pow(math.sin(y), d) * math.pow(math.cos(y), e)
    return module1 * module2 * module3

def get_harmonic_level(number, params): 
    a = compute_harmonic(number, params)
    # print('DEBUG n = {0}, a = {1}'.format(number, a))
    return abs(a)

def get_harmonic_levels(waveform_name, count):
    params = waveform_params[waveform_name]
    levels = []
    n = 0
    while n < count:
        levels.append(get_harmonic_level(n + 1, params))
        n += 1
    return levels

if __name__ == '__main__':
    for note in range(0, 128):
        print(ams_template.format(note, note))

        levels = get_harmonic_levels('triangle', 64)
        for i, level in enumerate(levels):
            print('Sine {0} {1:.6f}'.format(i + 1, level))

    print()
