import sys
import os
import math

# the terms in the tuple are: a, b, c, xp, d, e, yp
waveform_params = {
    'Saw':           (1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
    'Square':        (1.0, 1.0, 0.0, 0.5, 0.0, 0.0, 0.0),
    'Triangle':      (2.0, 1.0, 0.0, 0.5, 0.0, 0.0, 0.0),
    'Pulse20':       (1.0, 1.0, 0.0, 0.2, 0.0, 0.0, 0.0),
    'Brassy':        (2.0, 2.0, 0.0, 0.1, 0.0, 0.0, 0.0),  # 10% triangular pulse
    'AnalogSquare':  (3.0, 1.0, 0.0, 0.48, 2.0, 0.0, 0.035),
    'PluckedString': (2.0, 1.0, 0.0, 0.2, 0.0, 0.0, 0.0),  # 20% uneven triangle
    'Oboe':          (0.4, 1.0, 0.0, 0.12, 0.0, 1.0, 0.47),
    'Trombone':      (2.0, 1.0, 0.0, 0.045, 1.0, 1.0, 0.0625),
    'FrenchHorn':    (2.0, 1.0, 0.0, 0.09, 1.0, 0.0, 0.13)
}

ams_template = """Autogenerated
AMS 1
Generate MultiCycleFM
BaseNote {0}
RootKey {0}
SampleRate 44100
Channels 1
BitsPerSample 32
Volume Auto"""

NUM_HARMONICS = 64

def compute_harmonic(number, params):
    n = float(number)
    (a, b, c, xp, d, e, yp) = params
    x = n * math.pi * xp
    y = n * math.pi * yp
    module1 = 1.0 / math.pow(n, a)
    module2 = math.pow(math.sin(x), b) * math.pow(math.cos(x), c)
    module3 = math.pow(math.sin(y), d) * math.pow(math.cos(y), e)
    return module1 * module2 * module3

def get_harmonic_level(number, params): 
    a = compute_harmonic(number, params)
    # print('DEBUG n = {0}, a = {1}'.format(number, a))
    return abs(a)

def get_harmonic_levels(waveform_name, count):
    params = waveform_params[waveform_name]
    levels = []
    n = 0
    while n < count:
        levels.append(get_harmonic_level(n + 1, params))
        n += 1
    return levels

def generate_64_sines():
    for i in range(64):
        print(ams_template.format(60, 60))
        print('Sine {0} 1.000000'.format(i + 1))
        print()

def make_ams_lines(w_name, note):
    lines = []
    lines.append(ams_template.format(note, note))
    levels = get_harmonic_levels(w_name, NUM_HARMONICS)
    for i, level in enumerate(levels):
        lines.append('Sine {0} {1:.6f}'.format(i + 1, level))
    return lines

def write_ams_file(w_name, note, output_path = ''):
    lines = make_ams_lines(w_name, note)
    file_name = os.path.join(output_path, '{0}-{1:03d}.ams'.format(w_name, note))
    with open(file_name, 'w') as f:
        for line in lines:
            f.write(line)
            f.write('\r\n')

if __name__ == '__main__':
    waveform_name = 'saw'
    output_path = ''
    if len(sys.argv) >= 3:
        waveform_name = sys.argv[1]
        if not waveform_name in waveform_params:
            print('Unknown waveform name "{0}". Known ones are: {1}'.format(waveform_name, ', '.join(waveform_params)))
            sys.exit(-1)
        output_path = sys.argv[2]
    else:
        print('Usage: python amsmaker.py waveform_name output_path')
        sys.exit(0)

    for note in range(128):
        #lines = make_ams_lines(waveform_name, note)
        #for line in lines:
        #    print(line)

        write_ams_file(waveform_name, note, output_path)

    #print("64 sines")
    #generate_64_sines()
